//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::prelude::{
    Airqualitymetrics, Devicemetrics, Environmentmetrics, Localstats, Neighborinfo,
};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "nodeinfo")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "custom(\"oid\")")]
    pub node_id: u32,
    #[sea_orm(column_type = "Text")]
    pub longname: String,
    #[sea_orm(column_type = "Text")]
    pub shortname: String,
    pub hwmodel: i32,
    #[sea_orm(column_type = "Text")]
    pub deployment_location: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::airqualitymetrics::Entity")]
    Airqualitymetrics,
    #[sea_orm(has_many = "super::devicemetrics::Entity")]
    Devicemetrics,
    #[sea_orm(has_many = "super::environmentmetrics::Entity")]
    Environmentmetrics,
    #[sea_orm(has_many = "super::localstats::Entity")]
    Localstats,
    #[sea_orm(has_many = "super::neighborinfo::Entity")]
    Neighborinfo,
}

impl Related<Airqualitymetrics> for Entity {
    fn to() -> RelationDef {
        Relation::Airqualitymetrics.def()
    }
}

impl Related<Devicemetrics> for Entity {
    fn to() -> RelationDef {
        Relation::Devicemetrics.def()
    }
}

impl Related<Environmentmetrics> for Entity {
    fn to() -> RelationDef {
        Relation::Environmentmetrics.def()
    }
}

impl Related<Localstats> for Entity {
    fn to() -> RelationDef {
        Relation::Localstats.def()
    }
}

impl Related<Neighborinfo> for Entity {
    fn to() -> RelationDef {
        Relation::Neighborinfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
