//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "neighborinfo")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "custom(\"oid\")")]
    pub msg_id: String,
    #[sea_orm(column_type = "custom(\"oid\")")]
    pub node_id: String,
    pub time: DateTime,
    #[sea_orm(column_type = "custom(\"oid\")", nullable)]
    pub last_sent_by_id: Option<String>,
    #[sea_orm(column_type = "custom(\"oid\")", nullable)]
    pub node_broadcast_interval_secs: Option<String>,
    pub neighbors: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nodeinfo::Entity",
        from = "Column::NodeId",
        to = "super::nodeinfo::Column::NodeId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Nodeinfo,
}

impl Related<super::nodeinfo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nodeinfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
